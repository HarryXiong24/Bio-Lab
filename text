begin
  idxs = findall(!isnan, flow_map_nans)
  vals = flow_map_nans[idxs]
  flow_map_nans_min, flow_map_nans_max = minimum(vals), maximum(vals)
  flow_map_render = zeros(size(flow_map_nans))
  for i in axes(flow_map_nans, 1)
    for j in axes(flow_map_nans, 2)
      for k in axes(flow_map_nans, 3)
        if isnan(flow_map_nans[i, j, k]) || iszero(flow_map_nans[i, j, k])
          flow_map_render[i, j, k] = flow_map_nans_min
        else
          flow_map_render[i, j, k] = flow_map_nans[i, j, k]
        end
      end
    end
  end
end


begin
  halfz_bottom_flow_map_render = deepcopy(flow_map_render)
  mid_point_z2 = size(halfz_bottom_flow_map_render, 3) รท 2
  halfz_bottom_flow_map_render[:, :, 1:mid_point_z2] .= 0
  halfz_bottom_min, halfz_bottom_max = minimum(halfz_bottom_flow_map_render), maximum(halfz_bottom_flow_map_render)
end

begin
  halfz_top_flow_map_render = deepcopy(flow_map_render)
  mid_point_z1 = size(halfz_top_flow_map_render, 3) รท 2
  halfz_top_flow_map_render[:, :, mid_point_z1:end] .= 0
  halfz_top_min, halfz_top_max = minimum(halfz_top_flow_map_render), maximum(halfz_top_flow_map_render)
end

let
  fig = Figure(resolution=(1200, 1000))

  # control azimuth
  Label(fig[0, 1], "Azimuth", justification=:left, lineheight=1)
  azimuth = GLMakie.Slider(fig[0, 2:3], range=0:0.01:1, startvalue=0.69)
  azimuth_slice = lift(azimuth.value) do a
    a * pi
  end

  # control elevation
  Label(fig[1, 1], "Elevation", justification=:left, lineheight=1)
  elevation = GLMakie.Slider(fig[1, 2:3], range=0:0.01:1, startvalue=0.18)
  elevation_slice = lift(elevation.value) do e
    e * pi
  end

  # control elevation
  Label(fig[2, 1], "Perspectiveness", justification=:left, lineheight=1)
  perspectiveness = GLMakie.Slider(fig[2, 2:3], range=0:0.01:1, startvalue=0.5)
  perspectiveness_slice = lift(perspectiveness.value) do p
    p
  end

  # control colormap top
  Label(fig[3, 1], "Color Range Max Top Half", justification=:left, lineheight=1)
  slider_max = GLMakie.Slider(fig[3, 2:3], range=0:10:halfz_top_max, startvalue=300)
  colorrange_max = Observable(300)
  on(slider_max.value) do c
    colorrange_max[] = c
    update_colorrange()
  end

  Label(fig[4, 1], "Color Range Min Top Half", justification=:left, lineheight=1)
  slider_min = GLMakie.Slider(fig[4, 2:3], range=-10000:10:0, startvalue=0)
  colorrange_min = Observable(0)
  on(slider_min.value) do c
    colorrange_min[] = c
    update_colorrange()
  end

  colorrange = Observable((0, 300))
  function update_colorrange()
    colorrange[] = (colorrange_min[], colorrange_max[])
  end

  # color
  jet_colors = ColorSchemes.jet.colors
  combined_colormap = [RGBAf(0.0, 0.0, 0.0, 0.0); jet_colors[2:end]]

  # control colormap bottom
  Label(fig[5, 1], "Color Range Max Bottom Half", justification=:left, lineheight=1)
  slider_max_bottom = GLMakie.Slider(fig[5, 2:3], range=0:10:halfz_bottom_max, startvalue=300)
  colorrange_max_bottom = Observable(300)
  on(slider_max_bottom.value) do c
    colorrange_max_bottom[] = c
    update_colorrange()
  end

  Label(fig[6, 1], "Color Range Min Bottom Half", justification=:left, lineheight=1)
  slider_min_bottom = GLMakie.Slider(fig[6, 2:3], range=-1000:10:0, startvalue=0)
  colorrange_min_bottom = Observable(0)
  on(slider_min_bottom.value) do c
    colorrange_min_bottom[] = c
    update_colorrange_bottom()
  end

  colorrange_bottom = Observable((0, 300))
  function update_colorrange_bottom()
    colorrange_bottom[] = (colorrange_min_bottom[], colorrange_max_bottom[])
  end

  # bottom color
  jet_colors = ColorSchemes.jet.colors
  combined_colormap_bottom = [RGBAf(0.0, 0.0, 0.0, 0.0); jet_colors[2:end]]

  # render picture
  ax = GLMakie.Axis3(fig[7, 1:2];
    perspectiveness=perspectiveness_slice,
    azimuth=azimuth_slice,
    elevation=elevation_slice,
    aspect=(1, 1, 1)
  )

  GLMakie.volume!(ax, halfz_top_flow_map_render[end:-1:1, end:-1:1, end:-1:1];
    colormap=combined_colormap,
    colorrange=colorrange,
    lowclip=RGBAf(0.0, 0.0, 0.0, 0.0),
    highclip=RGBAf(0.0, 0.0, 0.0, 0.0),
    nan_color=RGBAf(0.0, 0.0, 0.0, 0.0),
    transparency=false
  )

  GLMakie.volume!(ax, halfz_bottom_flow_map_render[end:-1:1, end:-1:1, end:-1:1];
    colormap=combined_colormap_bottom,
    colorrange=colorrange_bottom,
    lowclip=RGBAf(0.0, 0.0, 0.0, 0.0),
    highclip=RGBAf(0.0, 0.0, 0.0, 0.0),
    nan_color=RGBAf(0.0, 0.0, 0.0, 0.0),
    transparency=false
  )

  #  GLMakie.volume!(ax, v2_reg[end:-1:1, end:-1:1, end:-1:1];
  #    colormap=combined_colormap,
  # colorrange=colorrange,
  #    lowclip=RGBAf(0.0, 0.0, 0.0, 0.0),
  #    highclip=RGBAf(0.0, 0.0, 0.0, 0.0),
  #    nan_color=RGBAf(0.0, 0.0, 0.0, 0.0),
  #    transparency=true
  #  )

  Colorbar(fig[7, 3], colormap=combined_colormap, flipaxis=false, colorrange=(flow_map_nans_min, flow_map_nans_max))

  button = GLMakie.Button(fig[8, 1], label="Download Image")

  on(button.clicks) do n
    save("output.raw", fig)
  end

  fig
  display(fig)
end